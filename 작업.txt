1. Member 작업
    Job-M01. 아이디 사용가능 확인 (REST. /api/member/check-username)
        - 사용가능하면 200, 사용중이면 409
    Job-M02. 회원 가입 (/member/join)
        - 아이디 사용여부 확인
        - 비밀번호 인코딩
        - 프로필 사진이 없다면 기본 프사를, 있다면 프로필 사진을 base64로 인코딩
    Job-M03. 아이디 찾기 (REST. /api/member/find-username)
        - 아이디가 있으면 200, 없으면 409
    Job-M04. 비밀번호 리셋 (REST. /api/member/reset-password)
        - 아이디가 있으면 임시비밀번호를 생성한 다음 이메일로 보낸다 -> 200
          아이디가 없으면 409
    Job-M05. 비밀번호 확인 (/member/check-password)
        - "내정보 보기"를 선택했을 때
            비밀번호를 확인하지 않은 경우 실행된다
        - 비밀번호를 확인
            성공했다면 세션에 비밀번호 확인을 저장한 다음, 내정보 보기로 이동
            실패한 경우 비밀번호 확인 재실행
    Job-M06. 내정보 보기 (/member/readme)
        - 비밀번호를 확인하지 않은 경우 비밀번호 확인으로 이동
        - 비밀번호를 확인한 경우 내정보를 출력
    Job-M07. 프로필 사진 변경 (REST. /api/member/update-profile)
    Job-M08. 비밀번호 변경 (/member/update-password)
        - 기존비밀번호가 일치하는 경우 새비밀번호를 인코딩한 다음 업데이트
    Job-M09. 탈퇴 (/member/withdraw)
        - 로그아웃한 다음 탈퇴 처리
    Job-M10. 레벨 갱신 (컨트롤러X. @Scheduled() )

2. Post
3. Comments

4. pom.xml에 의존성 추가
   - log4jdbc : sql 로깅
   - thymeleaf extras spring security 6
   - apache commons : 비밀번호 생성

5. 설정
    - application.properties : 프로젝트 설정
    - logback.xml : 스프링 로깅 라이브러리인 logback을 커스터마이즈
    - log4jdbc~.properties : log4jdbc와 logback을 연결하는 설정(내용은 정해져 있다)

6. xml 관련
    - metadata : 데이터를 설명하는 데이터
    - 보통 마크업을 이용해 메타정보를 기술한다
        html - 미리 정의된 태그를 사용
        xml - 사용자 정의 태그를 사용
    - namespace : 이름 충돌을 막기위해 사용하는 일종의 폴더 개념
        자바의 네임스페이스(이름공간)는 패키지
          java.sql.Date와 java.util.Date가 구별된다
          이렇게 패키지 포함 전체이름을 FQN이라고 한다
    - xml을 사용할 때 사용자 정의 태그가 충돌할 수 있다
        xml은 url 형식의 네임스페이스를 이용한다
            타임리프는 <div th:forEach>, jsp는 <c:forEach>

7. DTD(Document Type Definition)
    - 마크업 문서의 종류와 버전을 알려준다
    - html5 문서는 <!document html>로 시작한다

8. 스프링 시큐리티 설정
    - Servlet : 백엔드에서 실행되는 표준 자바 인터페이스
      Filter : 서블릿 앞에서 실행되는 전처리 클래스 (예를 들어 로그인 확인 등)
    - 스프링 시큐리티는 10여개의 필터로 구성되며 이를 FilterChain이라고 한다
    - 1. FilterChain 커스터마이즈
    - 2. UserDetailsService 작성 : DB에서 사용자 정보를 읽어 스프링 시큐리티가 원하는 형태(UserDetails)로 넘겨주는 역할
    - 3. PasswordEncoder 등록

9. 의존성 주입
    - 스프링은 개발자가 필요한 객체를 직접 생성하지 않고 주입받아서 사용한다
    - 객체 생성
        스프링 ApplicationContext가 @Component가 걸려있는 클래스들을 찾아서 객체를 생성한다 (Spring Bean)
        어노테이션
            스프링이 @Component <- @Controller, @Service, @Repository의 객체를 생성
            마이바티스는 @Mapper의 객체를 생성해 ApplicationContext에 등록
            필요한 경우 개발자가 @Bean을 이용해 객체를 ApplicationContext에 등록
    - AppplicationContext는 빈을 관리하다가 @Autowired로 개발자가 요청하면 주입해 준다

10. HTTP 상태코드
    - 200 : 성공(원래 의미는 에러가 발생하지 않았다 -> REST에서는 당신이 원하는 결과)
    - 401 : 로그인 필요
    - 403 : 권한 필요(로그인은 된 상태)
    - 404 : 당신이 요구한 것을 찾을 수 없다(not found)
    - 405 : method 오류 (get <-> post)
    - 400 : 수신 거부
    - 500 : 처리 중 오류
    - 409 : 부정적인 결과에 사용하겠다














